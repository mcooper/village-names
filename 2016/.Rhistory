remove.packages('lattice')
library(lattice)
?levelplot
install.packages("lattice")
library(rasterVis)
remove.packages(lattice)
remove.packages('lattice')
?lattice
library(lattice)
sessionInfo()
packinfo <- installed.packages (fields = c ("lattice", "0.6-26"))
packinfo
packinfo <- installed.packages (fields = c ("Package", "Version"))
packinfo
packinfo[c('lattice','latticeExtra'),]
remove.package('lattice')
remove.packages('lattice')
remove.packages('latticeExtra')
packinfo <- installed.packages (fields = c ("Package", "Version"))
packinfo[c('lattice','latticeExtra'),]
setwd('/Users/matthewcooper/Creativitea/village-names/2016')
clustering <- read.csv('3-gram MoransI.csv')
head(clusering)
head(clustering)
setwd('/Users/matthewcooper/Creativitea/village-names/2016/')
library(dplyr)
library(rgdal)
library(randomForest)
##################
### Read in Data & Prep names
##################
vills <- read.delim('ML.txt', stringsAsFactors = F)
x <- c('geonameid','name','asciiname','alternatenames','latitude','longitude','feature_class','feature_code','country_code','cc2','admin1_code','admin2_code','admin3_code','admin4_code','population','elevation','dem','timezone','modification date')
names(vills) <- x
#Select villages, cities, towns, etc, leaving out universities, forests, etc
vills <- vills[vills$feature_class=='P', ]
indexCapitalize <- function(str, index){
if (index==1){
end <- substr(str, index+1, nchar(str))
chr <- substr(str, index, index)
newStr <- paste0(toupper(chr), end)
}
else if (index==nchar(str)){
begin <- substr(str, 1, index-1)
chr <- substr(str, index, index)
newStr <- paste0(begin, toupper(chr))
}
else{
begin <- substr(str, 1, index-1)
end <- substr(str, index+1, nchar(str))
chr <- substr(str, index, index)
newStr <- paste0(begin, toupper(chr), end)
}
return(newStr)
}
makeLastUpper <- function(str){
newStr <- indexCapitalize(str, nchar(str))
ind <- c(gregexpr(pattern=' ', str)[[1]]-1)
for (i in ind){
newStr <- indexCapitalize(newStr, i)
}
return(newStr)
}
vills$NamE <- sapply(vills$asciiname, makeLastUpper)
vills <- vills[ , c('NamE', 'latitude', 'longitude')] %>% unique
################
###Get 3-grams
###############
getThreeGrams <- function(str){
len <- nchar(str)
mapply(substr, start=1:(len-2), stop=3:len, x=str)
}
threeGrams <- sapply(vills$NamE, getThreeGrams) %>% unlist %>% unique
######################
###Get Binary Matrix
######################
binmat <- sapply(threeGrams,grepl,vills$NamE)
row.names(binmat) <- vills$NamE
spatial_grams <- clustering$gram[clustering$p.value < 0.05]
binmatsel <- binmat[ , colnames(binmat) %in% spatial_grams]
install.packages("cba")
?dist
dist(data.frame(a=c(1,0,1,0), b=c(1,1,0,0)))
view(data.frame)
data.frame(a=c(1,0,1,0), b=c(1,1,0,0))
?save
save(binmat, binmatsel, file='binmat.Rdata')
?rockCluster
library(cba)
?dist
distmat <- dist(binmatsel, method='binary')
distmat <- dist(binmatselsamp, method='binary')
binmatselsamp <- binmatsel[sample(1:nrow(binmatsel), 1000, replace=F), ]
binmatselsamp <- binmatsel[sample(1:nrow(binmatsel), 100, replace=F), ]
distmat <- dist(binmatselsamp, method='binary')
distmat[1:10, 1:10]
dim(distmat)
distmat[1:10, 1:10]
distmat
binmatselsamp <- binmatsel[sample(1:nrow(binmatsel), 1000, replace=F), ]
rockmod <- rockCluster(binmatselsamp, 2, beta = 1-theta, theta = 0.999, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod <- rockCluster(binmatselsamp, 2, beta = 0.01, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod
?rockCluster
names(rockmod)
rockmod$size
table(rockmod$size)
rockmod$cl
rockmod <- rockCluster(binmatsel, 2, beta = 0.01, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
dim(binmatsel)
names(rockmod)
rockmod$cl
vills$NamE[1000]
rockmod$cl[1000]
rockmod$cl[1050]
vills$NamE[10050]
rockmod$cl[10050]
vills$clust <- rockmod$cl
plot(vills$latitude, vills$longitude)
plot(vills$longitude, vills$latitude)
rockmod$cl
table(rockmod$cl)
table(rockmod$cl)[table(rockmod$cl) > 1]
multiclust <- table(rockmod$cl)[table(rockmod$cl) > 1]
vills$clust <- vills$clust %in% names(multiclust)
vills$clust
vills$clust <- rockmod$cl
multiclust <- table(rockmod$cl)[table(rockmod$cl) > 1]
vills$clust <- vills$NamE %in% names(multiclust)
vills$clust <- rockmod$cl
multiclust <- table(rockmod$cl)[table(rockmod$cl) > 1]
vills$multiclust <- vills$NamE %in% names(multiclust)
sub <- vills[vills$multiclust, ]
plot(sub$longitude, sub$latitude)
sub
vills$NamE %in% names(multiclust)
multiclust
names(multiclust)
vills$multiclust <- vills$clust %in% names(multiclust)
sub <- vills[vills$multiclust, ]
plot(sub$longitude, sub$latitude)
plot(sub$longitude, sub$latitude, color=sub$clust)
?plot
plot(sub$longitude, sub$latitude, col=sub$clust)
?rockCluster
plot(sub$longitude, sub$latitude, col=sub$clust)
?rockCluster
rockmod <- rockCluster(binmatsel, 10, beta = 0.01, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
table(rockmod$cl)
rockmod <- rockCluster(binmatsel, 10, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod$cl
table(rockmod$cl)
rockmod0.1 <- rockCluster(binmatsel, 0.1, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod0.5 <- rockCluster(binmatsel, 0.5, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod0.75 <- rockCluster(binmatsel, 0.75, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod1 <- rockCluster(binmatsel, 1, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod2 <- rockCluster(binmatsel, 2, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod3 <- rockCluster(binmatsel, 3, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod4 <- rockCluster(binmatsel, 4, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod5 <- rockCluster(binmatsel, 5, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod6 <- rockCluster(binmatsel, 6, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod7 <- rockCluster(binmatsel, 7, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod8 <- rockCluster(binmatsel, 8, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod10 <- rockCluster(binmatsel, 10, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
rockmod15 <- rockCluster(binmatsel, 15, beta = 0.9, theta = 0.99, fun = "dist", funArgs = list(method="binary"), debug = FALSE)
tablerockmod15$cl)
table(rockmod15$cl)
tablerockmod10$cl)
table(rockmod10$cl)
table(rockmod7$cl)
table(rockmod1$cl)
table(rockmod0.75$cl)
table(rockmod0.5$cl)
table(rockmod0.1$cl)
rockCluster
rc <- do.call(fun, c(list(x = binmatsel), as.list(method="binary")))
rc <- do.call(fun, c(list(x = binmatsel), as.list(list(method="binary"))))
?dist
rc <- dist(x = binmatsel, method="binary")
rc[1:10, 1:10]
dim(rc)
class(rc)
head(rc)
rc
rc[1]
rc[2]
rc[14004]
rc]
rc
as.matrix(rc)[1:10, 1:10]
